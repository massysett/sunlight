Current time: 2014-02-23 22:36:13.994767 UTC
ghc-7.4 ["--version"] succeeded with exit code 0
Standard output:
The Glorious Glasgow Haskell Compilation System, version 7.4.2

Standard error:

ghc-pkg-7.4 ["--version"] succeeded with exit code 0
Standard output:
GHC package manager version 7.4.2

Standard error:

cabal ["--version"] succeeded with exit code 0
Standard output:
cabal-install version 1.18.0.2
using version 1.18.1 of the Cabal library 

Standard error:

ghc-7.4 ["--make","-outputdir","./sunlight-30846","-o","./sunlight-30846/Setup","Setup.hs"] succeeded with exit code 0
Standard output:
[1 of 1] Compiling Main             ( Setup.hs, sunlight-30846/Main.o )
Linking ./sunlight-30846/Setup ...

Standard error:

./sunlight-30846/Setup ["sdist","--output-directory=./sunlight-30846/distDeps"] succeeded with exit code 0
Standard output:
Distribution quality warnings:
When distributing packages it is encouraged to specify source control
information in the .cabal file using one or more 'source-repository' sections.
See the Cabal user guide for details.
Building source dist for sunlight-0.1.0.0...
Source directory created: ./sunlight-30846/distDeps

Standard error:
Warning: Cannot run preprocessors. Run 'configure' command first.

./sunlight-30846/Setup ["sdist","--output-directory=./sunlight-30846/distPkg"] succeeded with exit code 0
Standard output:
Distribution quality warnings:
When distributing packages it is encouraged to specify source control
information in the .cabal file using one or more 'source-repository' sections.
See the Cabal user guide for details.
Building source dist for sunlight-0.1.0.0...
Source directory created: ./sunlight-30846/distPkg

Standard error:
Warning: Cannot run preprocessors. Run 'configure' command first.

ghc-pkg-7.4 ["init","./sunlight-30846/db"] succeeded with exit code 0
Standard output:

Standard error:

cabal ["install","--verbose=2","--with-compiler=ghc-7.4","--with-hc-pkg=ghc-pkg-7.4","--prefix=.././sunlight-30846/prefix","--disable-library-profiling","--disable-executable-profiling","--package-db=clear","--package-db=global","--package-db=.././sunlight-30846/db","--enable-tests","--disable-documentation","--only-dependencies"] FAILED with exit code 1
Standard output:

Standard error:
cabal: .././sunlight-30846/db: does not exist

ghc-pkg-7.4 ["list","--global","--package-db=.././sunlight-30846/db"] FAILED with exit code 1
Standard output:

Standard error:
ghc-pkg: unrecognized option `--package-db=.././sunlight-30846/db'
Usage:
  ghc-pkg init {path}
    Create and initialise a package database at the location {path}.
    Packages can be registered in the new database using the register
    command with --package-conf={path}.  To use the new database with GHC,
    use GHC's -package-conf flag.

  ghc-pkg register {filename | -}
    Register the package using the specified installed package
    description. The syntax for the latter is given in the ghc-pkg
    documentation.  The input file should be encoded in UTF-8.

  ghc-pkg update {filename | -}
    Register the package, overwriting any other package with the
    same name. The input file should be encoded in UTF-8.

  ghc-pkg unregister {pkg-id}
    Unregister the specified package.

  ghc-pkg expose {pkg-id}
    Expose the specified package.

  ghc-pkg hide {pkg-id}
    Hide the specified package.

  ghc-pkg trust {pkg-id}
    Trust the specified package.

  ghc-pkg distrust {pkg-id}
    Distrust the specified package.

  ghc-pkg list [pkg]
    List registered packages in the global database, and also the
    user database if --user is given. If a package name is given
    all the registered versions will be listed in ascending order.
    Accepts the --simple-output flag.

  ghc-pkg dot
    Generate a graph of the package dependencies in a form suitable
    for input for the graphviz tools.  For example, to generate a PDF    of the dependency graph: ghc-pkg dot | tred | dot -Tpdf >pkgs.pdf
  ghc-pkg find-module {module}
    List registered packages exposing module {module} in the global
    database, and also the user database if --user is given.
    All the registered versions will be listed in ascending order.
    Accepts the --simple-output flag.

  ghc-pkg latest {pkg-id}
    Prints the highest registered version of a package.

  ghc-pkg check
    Check the consistency of package depenencies and list broken packages.
    Accepts the --simple-output flag.

  ghc-pkg describe {pkg}
    Give the registered description for the specified package. The
    description is returned in precisely the syntax required by ghc-pkg
    register.

  ghc-pkg field {pkg} {field}
    Extract the specified field of the package description for the
    specified package. Accepts comma-separated multiple fields.

  ghc-pkg dump
    Dump the registered description for every package.  This is like
    "ghc-pkg describe '*'", except that it is intended to be used
    by tools that parse the results, rather than humans.  The output is
    always encoded in UTF-8, regardless of the current locale.

  ghc-pkg recache
    Regenerate the package database cache.  This command should only be
    necessary if you added a package to the database by dropping a file
    into the database directory manually.  By default, the global DB
    is recached; to recache a different DB use --user or --package-conf
    as appropriate.

 Substring matching is supported for {module} in find-module and
 for {pkg} in list, describe, and field, where a '*' indicates
 open substring ends (prefix*, *suffix, *infix*).

  When asked to modify a database (register, unregister, update,
  hide, expose, and also check), ghc-pkg modifies the global database by
  default.  Specifying --user causes it to act on the user database,
  or --package-conf can be used to act on another database
  entirely. When multiple of these options are given, the rightmost
  one is used as the database to act upon.

  Commands that query the package database (list, tree, latest, describe,
  field) operate on the list of databases specified by the flags
  --user, --global, and --package-conf.  If none of these flags are
  given, the default is --global --user.

 The following optional flags are also accepted:

                 --user                  use the current user's package database
                 --global                use the global package database
  -f FILE        --package-conf=FILE     use the specified package config file
                 --global-conf=FILE      location of the global package config
                 --no-user-package-conf  never read the user package database
                 --force                 ignore missing dependencies, directories, and libraries
                 --force-files           ignore missing directories and libraries only
  -g             --auto-ghci-libs        automatically build libs for GHCi (with register)
                 --expand-env-vars       expand environment variables (${name}-style) in input package descriptions
                 --expand-pkgroot        expand ${pkgroot}-relative paths to absolute in output package descriptions
                 --no-expand-pkgroot     preserve ${pkgroot}-relative paths in output package descriptions
  -?             --help                  display this help and exit
  -V             --version               output version information and exit
                 --simple-output         print output in easy-to-parse format for some commands
                 --names-only            only print package names, not versions; can only be used with list --simple-output
                 --ignore-case           ignore case for substring matching
  -v[Verbosity]  --verbose[=Verbosity]   verbosity level (0-2, default 1)


ghc ["--make","Setup.hs"] succeeded with exit code 0
Standard output:
[1 of 1] Compiling Main             ( Setup.hs, Setup.o )
Linking Setup ...

Standard error:

./Setup ["configure","--verbose=2","--with-compiler=ghc-7.4","--with-hc-pkg=ghc-pkg-7.4","--prefix=.././sunlight-30846/prefix","--package-db=clear","--package-db=global","--package-db=.././sunlight-30846/db","--enable-tests"] FAILED with exit code 1
Standard output:
Configuring sunlight-0.1.0.0...

Standard error:
Setup: ghc-pkg: .././sunlight-30846/db: openFile: does not exist (No such file
or directory)

./Setup ["build","--verbose=2"] FAILED with exit code 1
Standard output:

Standard error:
Setup: Run the 'configure' command first.

./Setup ["install","--verbose=2"] FAILED with exit code 1
Standard output:

Standard error:
Setup: Run the 'configure' command first.

ghc-pkg-7.4 ["list","--global","--package-conf=.././sunlight-30846/db"] FAILED with exit code 1
Standard output:

Standard error:
ghc-pkg: .././sunlight-30846/db: openFile: does not exist (No such file or directory)

